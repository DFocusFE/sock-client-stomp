(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"./docs/1_home.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return i});var o=n("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(n("react"),n("./node_modules/@mdx-js/react/dist/index.es.js")),c={},a="wrapper";function i(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(s.b)(a,Object.assign({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"why-sock-client-stomp"},"Why sock-client-stomp"),Object(s.b)("p",null,"Once you are seeking for a websocket solution, ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/sockjs/sockjs-client"}),"sockjs-client")," and ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"http://jmesnil.net/stomp-websocket/doc/"}),"stomp")," might be your choice."),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"sock-client-stomp")," is made for few useful features(like: reconnect), project based(close to your business)"),Object(s.b)("h2",{id:"installation"},"Installation"),Object(s.b)("h3",{id:"yarn"},"yarn"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"yarn add sock-client-stomp\n")),Object(s.b)("h3",{id:"npm"},"npm"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm install sock-client-stomp\n")),Object(s.b)("h2",{id:"usage"},"Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"import { SockClient } from 'sock-client-stomp'\n\nthis.socket = new SockClient({\n  base: 'http://demo.ssp.com/msg-center/websocket',\n  token: 'your token for authentication',\n  projectId: 'project you are going to watch',\n  // set to false to disable reconnect feature\n  reconnect: {\n    timeout: 30 * 1000\n  }\n})\n\n// watch every connection state change\nthis.socket.onStateChange(state => {\n  this.setState({\n    connectState: state\n  })\n})\n\n// subscribe broadcast info\nthis.socket.subscribeBroadcast('topic your are going to watch', arg => {\n  console.log(arg)\n  message.info(JSON.parse(arg.body).content)\n})\n\n// connect\nthis.socket.connect()\n")))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"docs/1_home.mdx"}}),i.isMDXComponent=!0}}]);